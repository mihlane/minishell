char	*norm1(t_expand *exp,char	*user, t_exp *expp, char	*str)
{
	char	*str2;

	str2 = ft_calloc(1, sizeof(char));
	if (exp->c == '$' && (isalnum(exp->value[exp->i + 1]) == 0))
	{
		str = parser_get_current_char_as_string(exp->c);
		exp->expanded = ft_strjoi(exp->expanded, str);
		token_advance(exp);
	}
	else
	{
		str2 = ft_calloc(1, sizeof(char));
		token_advance(exp);
		while (isalnum(exp->c) != 0 || exp->c == '_')
			str2  = expand_no_quote(str, exp, str2);
		user = ft_getenv(expp, str2);
		if (user == NULL && exp->type > 0 && exp->type <= 4)
		{
			printf("$%s: ambiguous redirect\n", str2);
			return (NULL);
		}
		if (user != NULL)
			exp->expanded = ft_strjoi(exp->expanded, user);
	}
	return (str2);
}

char	*ret_expanded_quote(char	*str, t_expand	*exp)
{
	str = parser_get_current_char_as_string(exp->c);
	exp->expanded = ft_strjoi(exp->expanded, str);
	token_advance(exp);
	return (exp->expanded);
}

char	*expand_no_quote(char	*str, t_expand	*exp)
{
	str = parser_get_current_char_as_string(exp->c);
	exp->expanded = ft_strjoi(exp->expanded, str);
	token_advance(exp);
	return (exp->expanded);
}

char	*expand_double(t_expand *exp, t_exp *expp)
{
	char	*str;
	char	*str2;
	char	*user;

	str = NULL;
	user = NULL;
	exp->expanded = expand_no_quote(str, exp);
	while (exp->c != '\0')
	{
		if (exp->c == '$' && (exp->value[exp->i + 1] == '$'
				|| isdigit(exp->value[exp->i + 1]) != 0))
			check_digits_and_dollar(exp, expp);
		if (exp->c == '$' && exp->value[exp->i + 1] != '$'
			&& isdigit(exp->value[exp->i + 1]) == 0)
			str2 = norm1(exp, user, expp, str);
		else if (exp->c != '$')
		{
			if (exp->c == '"')
				return (ret_expanded_quote(str, exp));
            else
			    exp->expanded = expand_no_quote(str, exp);
		}
	}
	if (strlen(str2) == 1)
		return (NULL);
	return (exp->expanded);
}







///////
t_expand	*amb_rdr(char	*str3)
{
	printf("$%s: ambiguous redirect\n", str3);
	return (NULL);
}

t_expand	*expand_nor(t_expand *exp, t_exp *expp)
{
	char	*str;
	char	*user;
	char	*str3;

	str = NULL;
	user = NULL;
	str3 = ft_calloc(1, sizeof(char));
	if (exp->c == '$' && (exp->value[exp->i + 1] == '$'
			|| isdigit(exp->value[exp->i + 1]) != 0))
		check_digits_and_dollar(exp, expp);
	if (exp->c == '$' && exp->value[exp->i + 1] == '?')
		exp->expanded = join_itoa(exp, g_sts->status);
	if (exp->c == '$' && exp->value[exp->i + 1] != '$'
		&& isdigit(exp->value[exp->i + 1]) == 0)
	{
		if (exp->c == '$' && (isalnum(exp->value[exp->i + 1]) == 0))
			exp->expanded = ret_expanded_quote(str, exp);
		else
		{
			token_advance(exp);
			while (isalnum(exp->c) != 0 || exp->c == '_')
				str3 = get_expanded_str2(str, str3, exp);
			user = ft_getenv(expp, str3);
			if (user == NULL && exp->type > 0 && exp->type <= 4)
				return (amb_rdr(str3));
			if (user != NULL)
				exp->expanded = ft_strjoi(exp->expanded, user);
			str3[0] = 0;
		}
	}
	return (exp);
}